---
# Source: urban-os/charts/kafka/templates/resource-limits.yml
apiVersion: v1
kind: LimitRange
metadata:
  name: default-limitrange
spec:
  limits:
  - default:
      memory: 128Mi
      cpu: 100m
    defaultRequest:
      memory: 128Mi
      cpu: 100m
    type: Container
---
# Source: urban-os/charts/elasticsearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "elasticsearch-master-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "elasticsearch-master"
---
# Source: urban-os/charts/alchemist/templates/cluster-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alchemist
---
# Source: urban-os/charts/andi/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: andi
---
# Source: urban-os/charts/discovery-api/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: discovery-api
---
# Source: urban-os/charts/discovery-streams/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: discovery-streams
---
# Source: urban-os/charts/forklift/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: forklift
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/010-ServiceAccount-strimzi-cluster-operator.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: strimzi-cluster-operator
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: service-account
    release: urban-os
    heritage: Helm
---
# Source: urban-os/charts/kafka/templates/kafka-patcher.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-patcher
---
# Source: urban-os/charts/raptor/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: raptor
---
# Source: urban-os/charts/reaper/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reaper
---
# Source: urban-os/charts/valkyrie/templates/cluster-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: valkyrie
---
# Source: urban-os/charts/andi/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: andi-lv-salt
type:
  Opaque
data:
  salt: devonlyenablefalseanddefineoutofsourceinprod
---
# Source: urban-os/charts/andi/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: urban-os-andi-auth0-client-secret
type: Opaque
stringData:
  auth0_client_secret: "qF6tW-xcL_l1Mwc4ckfXOReCt-f9BhvdIIc7h1p3Az36yjOfKqv3IKVFGW3ptxrt"
---
# Source: urban-os/charts/andi/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: urban-os-andi-aws-credentials
type: Opaque
stringData:
  
  aws_access_key_secret: "\"0doQJevNCMHz2N7jvylasK3VWEzUHcTf8YGY0VfY\""
  aws_access_key_id: "\"ZCVGOsbnHUBMelrlcc4AvJEfUgk5xvmsNtcCFuGD\""
---
# Source: urban-os/charts/discovery-api/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: discovery-api-presign-key
type: Opaque
stringData:
  discovery-api-presign-key: "khTs5K3NFDC8pzRnfShNmB9K0QZnm4q9EWMtEJgzzXe6iCeETL3QUBqw2G94vs7"
---
# Source: urban-os/charts/discovery-api/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: guardian-secret-key
type: Opaque
stringData:
  guardian-secret-key: "ZHgXD7UtQfEbDGvdJG3nmnn2FQ7ABumSOHVddzrkGZZQCCZN0wXdmDWLo7K8QSy"
---
# Source: urban-os/charts/discovery-api/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: urban-os-discovery-api-aws-credentials
type: Opaque
stringData:
  
  aws_access_key_secret: "\"0doQJevNCMHz2N7jvylasK3VWEzUHcTf8YGY0VfY\""
  aws_access_key_id: "\"ZCVGOsbnHUBMelrlcc4AvJEfUgk5xvmsNtcCFuGD\""
---
# Source: urban-os/charts/raptor/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: urban-os-raptor-auth0-client-secret
type: Opaque
stringData:
  auth0_client_secret: "qF6tW-xcL_l1Mwc4ckfXOReCt-f9BhvdIIc7h1p3Az36yjOfKqv3IKVFGW3ptxrt"
---
# Source: urban-os/charts/reaper/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: urban-os-reaper-aws-credentials
type: Opaque
stringData:
  aws_access_key_secret: "example"
  aws_access_key_id: "example"
---
# Source: urban-os/charts/discovery-ui/templates/configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: discovery-ui-configs
data:
  config.js: |
    window.API_HOST = 'https://data.dev.apps.hsrqs9l3.eastus.aroapp.io'
    window.GTM_ID = 'GTM-EXAMPLE'
    window.BASE_URL = 'dev.apps.hsrqs9l3.eastus.aroapp.io/'
    window.STREETS_TILE_LAYER_URL = 'https://{s}.tiles.mapbox.com/styles/v1/mapbox/streets-v10/tiles/{z}/{x}/{y}{r}?access_token=pk.eyJ1IjoiYmVuamFtaW4tbWl0Y2hpbnNvbiIsImEiOiJja3lsdHBwcXAwd2pzMndvMGFrYm0ybW81In0.SwliCyvwqYb-SoyawbVivw'
    window.MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiYmVuamFtaW4tbWl0Y2hpbnNvbiIsImEiOiJja3lsdHBwcXAwd2pzMndvMGFrYm0ybW81In0.SwliCyvwqYb-SoyawbVivw'
    window.LOGO_URL = ''
    window.AUTH0_DOMAIN = 'mdot-dev.us.auth0.com'
    window.AUTH0_CLIENT_ID = 'Xfj3PM4QBj0luV20sqIAlfUKqxz29fkd'
    window.AUTH0_AUDIENCE = 'discovery_api'
  default.conf: |
    server_name  localhost;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options "DENY";
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma "no-cache";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline' *.googletagmanager.com *.google-analytics.com; style-src 'self' 'unsafe-inline'; frame-src *.auth0.com; img-src 'self' *.hsrqs9l3.eastus.aroapp.io *.amazonaws.com *.mapbox.com *.google-analytics.com *.google.com *.doubleclick.net data: blob:; connect-src 'self' *.smartcolumbusos.com *.hsrqs9l3.eastus.aroapp.io *.auth0.com *.mapbox.com *.plot.ly; worker-src blob:; block-all-mixed-content";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

    server_tokens off;

    gzip on;
    gzip_static on;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_proxied  any;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;

    index  index.html index.htm;

    location / {
      try_files $uri $uri/ /index.html;
    }
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/050-ConfigMap-strimzi-cluster-operator.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: strimzi-cluster-operator
  labels:
    app: strimzi
data:
  log4j2.properties: |
    name = COConfig
    monitorInterval = 30

    appender.console.type = Console
    appender.console.name = STDOUT
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

    rootLogger.level = ${env:STRIMZI_LOG_LEVEL:-INFO}
    rootLogger.appenderRefs = stdout
    rootLogger.appenderRef.console.ref = STDOUT
    rootLogger.additivity = false

    # Kafka AdminClient logging is a bit noisy at INFO level
    logger.kafka.name = org.apache.kafka
    logger.kafka.level = WARN
    logger.kafka.additivity = false

    # Zookeeper is very verbose even on INFO level -> We set it to WARN by default
    logger.zookeepertrustmanager.name = org.apache.zookeeper
    logger.zookeepertrustmanager.level = WARN
    logger.zookeepertrustmanager.additivity = false

    # Keeps separate level for Netty logging -> to not be changed by the root logger
    logger.netty.name = io.netty
    logger.netty.level = INFO
    logger.netty.additivity = false
---
# Source: urban-os/charts/kubernetes-data-platform/templates/metastore/configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-data-platform-metastore-metastore-configs
  labels:
    component: presto
    environment: sandbox
    release: urban-os
    source: helm
data:
  jmx_exporter_config.yaml: |
    {}
---
# Source: urban-os/charts/kubernetes-data-platform/templates/metastore/metastore-site.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-data-platform-metastore-config
  labels:
    component: metastore
    environment: sandbox
    release: urban-os
    source: helm
data:
  metastore-site.xml: |-
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
      <property>
        <name>metastore.thrift.uris</name>
        <value>thrift://kubernetes-data-platform-metastore:9083</value>
      </property>
      <property>
        <name>metastore.warehouse.dir</name>
        <value>s3a://presto-hive-storage/hive-s3</value>
      </property>
      <property>
        <name>metastore.task.threads.always</name>
        <value>org.apache.hadoop.hive.metastore.events.EventCleanerTask,org.apache.hadoop.hive.metastore.MaterializationsCacheCleanerTask</value>
      </property>
      <property>
        <name>metastore.expression.proxy</name>
        <value>org.apache.hadoop.hive.metastore.DefaultPartitionExpressionProxy</value>
      </property>
      <property>
        <name>javax.jdo.option.ConnectionURL</name><value>jdbc:postgresql://mdot-dev-postgres.postgres.database.azure.com/metastore?ssl=true&amp;sslmode=verify-full&amp;sslrootcert=/etc/ssl/certs/ca-certificates.crt</value>
      </property>
      <property>
        <name>javax.jdo.option.ConnectionDriverName</name>
        <value>org.postgresql.Driver</value>
      </property>
      <property>
        <name>javax.jdo.option.ConnectionUserName</name>
        <value>padmin</value>
      </property>
      <property>
        <name>javax.jdo.option.ConnectionPassword</name>
        <value>96aeCcKV8gx5UX</value>
      </property>
      <property>
        <name>metastore.metastore.event.db.notification.api.auth</name>
        <value>false</value>
      </property>
    </configuration>
---
# Source: urban-os/charts/kubernetes-data-platform/templates/minio/google-creds.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: google-credentials
data:
  config.json: |
    {
     "type": "service_account",
     "project_id": "",
     "private_key_id": "",
     "private_key": "",
     "client_email": "",
     "client_id": "",
     "auth_uri": "https://accounts.google.com/o/oauth2/auth",
     "token_uri": "https://oauth2.googleapis.com/token",
     "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
     "client_x509_cert_url": ""
    }
---
# Source: urban-os/charts/kubernetes-data-platform/templates/presto/coordinator-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-data-platform-presto-coordinator
  labels:
    component: presto
    role: coordinator
    environment: sandbox
    release: urban-os
    source: helm
data:
  config.properties: |
    coordinator=true
    node-scheduler.include-coordinator=false
    http-server.http.port=8080
    query.max-memory=1GB
    query.max-memory-per-node=0.5GB
    query.max-total-memory-per-node=0.6GB
    memory.heap-headroom-per-node=0.75GB
    discovery-server.enabled=true
    discovery.uri=http://kubernetes-data-platform-presto:8080
    task.writer-count=1
---
# Source: urban-os/charts/kubernetes-data-platform/templates/presto/presto-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-data-platform-presto-configs
  labels:
    component: presto
    environment: sandbox
    release: urban-os
    source: helm
data:
  node.properties: |
    node.environment=production
    node.data-dir=/presto/etc/data

  jvm.config: |
    -server
    -Xmx1536M
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
  jmx_exporter_config.yaml: |
    {}

  log.properties: |
    com.facebook.presto=INFO

  hive.properties: |
    connector.name=hive-hadoop2
    hive.metastore.uri=thrift://kubernetes-data-platform-metastore:9083
    hive.metastore.username=padmin
    hive.config.resources=/etc/hadoop/conf/core-site.xml
    hive.metastore-timeout=360m
    hive.allow-drop-table=true
    hive.allow-rename-table=true
    hive.allow-drop-column=true
    hive.allow-rename-column=true
    hive.allow-add-column=true
    hive.s3.aws-access-key="ZCVGOsbnHUBMelrlcc4AvJEfUgk5xvmsNtcCFuGD"
    hive.s3.aws-secret-key="0doQJevNCMHz2N7jvylasK3VWEzUHcTf8YGY0VfY"
    hive.s3.path-style-access=true
    hive.s3.endpoint=http://minio.dev.svc.cluster.local:80
    hive.s3.ssl.enabled=false
---
# Source: urban-os/charts/kubernetes-data-platform/templates/presto/worker-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-data-platform-presto-worker
  labels:
    component: presto
    role: worker
    environment: sandbox
    release: urban-os
    source: helm
data:
  config.properties: |
    coordinator=false
    http-server.http.port=8080
    query.max-memory=1GB
    query.max-memory-per-node=0.5GB
    query.max-total-memory-per-node=0.6GB
    discovery.uri=http://kubernetes-data-platform-presto:8080
    memory.heap-headroom-per-node=0.75GB
    task.writer-count=1
  health_check.sh: |
    #!/bin/bash
    curl --silent kubernetes-data-platform-presto:8080/v1/node | tr "," "\n" | grep --silent $(hostname -i)
---
# Source: urban-os/charts/kubernetes-data-platform/templates/shared-configs/core-site.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-data-platform-core-site
  labels:
    component: hadoop
    environment: sandbox
    release: urban-os
    source: helm
data:
  core-site.xml: |-
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>

      <property>
        <name>fs.defaultFS</name>
        <value>s3a://presto-hive-storage</value>
        <final>true</final>
      </property>
      <property>
        <name>fs.s3a.endpoint</name>
        <value>http://minio.dev.svc.cluster.local:80</value>
      </property>
      <property>
        <name>fs.s3a.access.key</name>
        <value>"ZCVGOsbnHUBMelrlcc4AvJEfUgk5xvmsNtcCFuGD"</value>
      </property>
      <property>
        <name>fs.s3a.secret.key</name>
        <value>"0doQJevNCMHz2N7jvylasK3VWEzUHcTf8YGY0VfY"</value>
      </property>

      <property>
        <name>fs.s3a.impl</name>
        <value>org.apache.hadoop.fs.s3a.S3AFileSystem</value>
      </property>

      <property>
        <name>fs.AbstractFileSystem.s3a.imp</name>
        <value>org.apache.hadoop.fs.s3a.S3A</value>
      </property>

      <property>
        <name>fs.trash.interval</name>
        <value>4320</value>
      </property>

      <property>
        <name>fs.s3a.fast.upload</name>
        <value>true</value>
      </property>

      <property>
        <name>fs.s3a.fast.upload.buffer</name>
        <value>disk</value>
      </property>

      <property>
        <name>fs.s3a.multipart.size</name>
        <value>67108864</value>
      </property>

      <property>
        <name>fs.s3a.path.style.access</name>
        <value>true</value>
      </property>

    </configuration>
---
# Source: urban-os/templates/auth0-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth0-config
data:
  auth0.config: |
    {
        "domain": "mdot-dev.us.auth0.com",
        "clientId": "PaGjylvfnjUaHh97zhbsBExlDsBfH1tr",
        "clients": {
            "Discovery": {"callbacks": "[\"http://localhost:9001/oauth\", \"https://discovery.dev.internal.apps.hsrqs9l3.eastus.aroapp.io/oauth\", \"https://discovery.dev.apps.hsrqs9l3.eastus.aroapp.io/oauth\", \"https://data.dev.internal.apps.hsrqs9l3.eastus.aroapp.io/tableau/connector.html\", \"https://data.dev.apps.hsrqs9l3.eastus.aroapp.io/tableau/connector.html\"]",
                "allowedLogoutUrls": "[\"http://localhost:9001/oauth\", \"https://discovery.dev.internal.apps.hsrqs9l3.eastus.aroapp.io/oauth\", \"https://discovery.dev.apps.hsrqs9l3.eastus.aroapp.io/oauth\"]",
                "allowedOrigins": "[\"http://localhost:9001\", \"https://discovery.dev.internal.apps.hsrqs9l3.eastus.aroapp.io\", \"https://discovery.dev.apps.hsrqs9l3.eastus.aroapp.io\",\"https://data.dev.internal.apps.hsrqs9l3.eastus.aroapp.io\", \"https://data.dev.apps.hsrqs9l3.eastus.aroapp.io\"]",
                "webOrigins": "[\"http://localhost:9001\", \"https://discovery.dev.internal.apps.hsrqs9l3.eastus.aroapp.io\", \"https://discovery.dev.apps.hsrqs9l3.eastus.aroapp.io\", \"https://data.dev.internal.apps.hsrqs9l3.eastus.aroapp.io\", \"https://data.dev.apps.hsrqs9l3.eastus.aroapp.io\"]",
                "name": "UrbanOS",
                "type": "spa"
            },
            "ANDI": {"callbacks": "[\"https://127.0.0.1.nip.io:4443/auth/auth0/callback\", \"http://andi.dev.internal.apps.hsrqs9l3.eastus.aroapp.io/auth/auth0/callback\", \"http://andi.dev.apps.hsrqs9l3.eastus.aroapp.io/auth/auth0/callback\", \"http://sharedata.dev.internal.apps.hsrqs9l3.eastus.aroapp.io/auth/auth0/callback\", \"http://sharedata.dev.apps.hsrqs9l3.eastus.aroapp.io/auth/auth0/callback\"]",
                "allowedLogoutUrls": "[\"https://127.0.0.1.nip.io:4443/auth/auth0\", \"http://andi.dev.internal.apps.hsrqs9l3.eastus.aroapp.io/auth/auth0\", \"http://andi.dev.apps.hsrqs9l3.eastus.aroapp.io/auth/auth0\", \"http://sharedata.dev.internal.apps.hsrqs9l3.eastus.aroapp.io/auth/auth0\", \"http://sharedata.dev.apps.hsrqs9l3.eastus.aroapp.io/auth/auth0\"]",
                "allowedOrigins": "[\"https://127.0.0.1.nip.io:4443\", \"http://andi.dev.internal.apps.hsrqs9l3.eastus.aroapp.io\", \"http://andi.dev.apps.hsrqs9l3.eastus.aroapp.io\", \"http://sharedata.dev.internal.apps.hsrqs9l3.eastus.aroapp.io\", \"http://sharedata.dev.apps.hsrqs9l3.eastus.aroapp.io\"]",
                "webOrigins": "[\"https://127.0.0.1.nip.io:4443\", \"http://andi.dev.internal.apps.hsrqs9l3.eastus.aroapp.io\", \"http://andi.dev.apps.hsrqs9l3.eastus.aroapp.io\", \"http://sharedata.dev.internal.apps.hsrqs9l3.eastus.aroapp.io\", \"http://sharedata.dev.apps.hsrqs9l3.eastus.aroapp.io\"]",
                "name": "ANDI",
                "type": "regular_web"
            }
        },
        "errorUrl": "https://discovery.dev.apps.hsrqs9l3.eastus.aroapp.io/oauth/error",
        "enabledClients": ["UrbanOS", "ANDI Dev", "Auth0 Management"]
    }
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/020-ClusterRole-strimzi-cluster-operator-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: strimzi-cluster-operator-namespaced
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: role
    release: urban-os
    heritage: Helm
rules:
- apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
    # The cluster operator needs to access and manage rolebindings to grant Strimzi components cluster permissions
  - rolebindings
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
    # The cluster operator needs to access and manage roles to grant the entity operator permissions
  - roles
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - ""
  resources:
    # The cluster operator needs to access and delete pods, this is to allow it to monitor pod health and coordinate rolling updates
  - pods
    # The cluster operator needs to access and manage service accounts to grant Strimzi components cluster permissions
  - serviceaccounts
    # The cluster operator needs to access and manage config maps for Strimzi components configuration
  - configmaps
    # The cluster operator needs to access and manage services and endpoints to expose Strimzi components to network traffic
  - services
  - endpoints
    # The cluster operator needs to access and manage secrets to handle credentials
  - secrets
    # The cluster operator needs to access and manage persistent volume claims to bind them to Strimzi components for persistent data
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - "kafka.strimzi.io"
  resources:
    # The cluster operator runs the KafkaAssemblyOperator, which needs to access and manage Kafka resources
  - kafkas
  - kafkas/status
    # The cluster operator runs the KafkaConnectAssemblyOperator, which needs to access and manage KafkaConnect resources
  - kafkaconnects
  - kafkaconnects/status
    # The cluster operator runs the KafkaConnectS2IAssemblyOperator, which needs to access and manage KafkaConnectS2I resources
  - kafkaconnects2is
  - kafkaconnects2is/status
    # The cluster operator runs the KafkaConnectorAssemblyOperator, which needs to access and manage KafkaConnector resources
  - kafkaconnectors
  - kafkaconnectors/status
    # The cluster operator runs the KafkaMirrorMakerAssemblyOperator, which needs to access and manage KafkaMirrorMaker resources
  - kafkamirrormakers
  - kafkamirrormakers/status
    # The cluster operator runs the KafkaBridgeAssemblyOperator, which needs to access and manage BridgeMaker resources
  - kafkabridges
  - kafkabridges/status
    # The cluster operator runs the KafkaMirrorMaker2AssemblyOperator, which needs to access and manage KafkaMirrorMaker2 resources
  - kafkamirrormaker2s
  - kafkamirrormaker2s/status
    # The cluster operator runs the KafkaRebalanceAssemblyOperator, which needs to access and manage KafkaRebalance resources
  - kafkarebalances
  - kafkarebalances/status
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
    # The cluster operator needs the extensions api as the operator supports Kubernetes version 1.11+
    # apps/v1 was introduced in Kubernetes 1.14
  - "extensions"
  resources:
    # The cluster operator needs to access and manage deployments to run deployment based Strimzi components
  - deployments
  - deployments/scale
    # The cluster operator needs to access replica sets to manage Strimzi components and to determine error states
  - replicasets
    # The cluster operator needs to access and manage replication controllers to manage replicasets
  - replicationcontrollers
    # The cluster operator needs to access and manage network policies to lock down communication between Strimzi components
  - networkpolicies
    # The cluster operator needs to access and manage ingresses which allow external access to the services in a cluster
  - ingresses
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - "apps"
  resources:
    # The cluster operator needs to access and manage deployments to run deployment based Strimzi components
  - deployments
  - deployments/scale
  - deployments/status
    # The cluster operator needs to access and manage stateful sets to run stateful sets based Strimzi components
  - statefulsets
    # The cluster operator needs to access replica-sets to manage Strimzi components and to determine error states
  - replicasets
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - ""
  resources:
    # The cluster operator needs to be able to create events and delegate permissions to do so
  - events
  verbs:
  - create
- apiGroups:
    # OpenShift S2I requirements
  - apps.openshift.io
  resources:
  - deploymentconfigs
  - deploymentconfigs/scale
  - deploymentconfigs/status
  - deploymentconfigs/finalizers
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
    # OpenShift S2I requirements
  - build.openshift.io
  resources:
  - buildconfigs
  - buildconfigs/instantiate
  - builds
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
    # OpenShift S2I requirements
  - image.openshift.io
  resources:
  - imagestreams
  - imagestreams/status
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
    # The cluster operator needs to access and manage network policies to lock down communication between Strimzi components
  - networkpolicies
    # The cluster operator needs to access and manage ingresses which allow external access to the services in a cluster
  - ingresses
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - route.openshift.io
  resources:
    # The cluster operator needs to access and manage routes to expose Strimzi components for external access
  - routes
  - routes/custom-host
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - policy
  resources:
    # The cluster operator needs to access and manage pod disruption budgets this limits the number of concurrent disruptions
    # that a Strimzi component experiences, allowing for higher availability
  - poddisruptionbudgets
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/021-ClusterRole-strimzi-cluster-operator-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: strimzi-cluster-operator-global
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: role
    release: urban-os
    heritage: Helm
rules:
- apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
    # The cluster operator needs to create and manage cluster role bindings in the case of an install where a user
    # has specified they want their cluster role bindings generated
  - clusterrolebindings
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
    # The cluster operator requires "get" permissions to view storage class details
    # This is because only a persistent volume of a supported storage class type can be resized
  - storageclasses
  verbs:
  - get
- apiGroups:
    - ""
  resources:
    # The cluster operator requires "list" permissions to view all nodes in a cluster
    # The listing is used to determine the node addresses when NodePort access is configured
    # These addresses are then exposed in the custom resource states
  - nodes
  verbs:
  - list
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/030-ClusterRole-strimzi-kafka-broker.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: strimzi-kafka-broker
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: broker-role
    release: urban-os
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
    # The Kafka Brokers require "get" permissions to view the node they are on
    # This information is used to generate a Rack ID that is used for High Availability configurations
  - nodes
  verbs:
  - get
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/031-ClusterRole-strimzi-entity-operator.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: strimzi-entity-operator
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: entity-operator-role
    release: urban-os
    heritage: Helm
rules:
- apiGroups:
  - "kafka.strimzi.io"
  resources:
    # The entity operator runs the KafkaTopic assembly operator, which needs to access and manage KafkaTopic resources
  - kafkatopics
  - kafkatopics/status
    # The entity operator runs the KafkaUser assembly operator, which needs to access and manage KafkaUser resources
  - kafkausers
  - kafkausers/status
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
    # The entity operator needs to be able to create events
  - create
- apiGroups:
  - ""
  resources:
    # The entity operator user-operator needs to access and manage secrets to store generated credentials
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/032-ClusterRole-strimzi-topic-operator.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: strimzi-topic-operator
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: topic-operator-role
    release: urban-os
    heritage: Helm
rules:
- apiGroups:
  - "kafka.strimzi.io"
  resources:
  - kafkatopics
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/033-ClusterRole-strimzi-kafka-client.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: strimzi-kafka-client
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: client-role
    release: urban-os
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
    # The Kafka clients (Connect, Mirror Maker, etc.) require "get" permissions to view the node they are on
    # This information is used to generate a Rack ID (client.rack option) that is used for consuming from the closest
    # replicas when enabled
  - nodes
  verbs:
  - get
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/021-ClusterRoleBinding-strimzi-cluster-operator.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: strimzi-cluster-operator
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: role-binding
    release: urban-os
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: strimzi-cluster-operator
    namespace: dev
roleRef:
  kind: ClusterRole
  name: strimzi-cluster-operator-global
  apiGroup: rbac.authorization.k8s.io
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/030-ClusterRoleBinding-strimzi-cluster-operator-kafka-broker-delegation.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: strimzi-cluster-operator-kafka-broker-delegation
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: broker-role-binding
    release: urban-os
    heritage: Helm
# The Kafka broker cluster role must be bound to the cluster operator service account so that it can delegate the cluster role to the Kafka brokers.
# This must be done to avoid escalating privileges which would be blocked by Kubernetes.
subjects:
  - kind: ServiceAccount
    name: strimzi-cluster-operator
    namespace: dev
roleRef:
  kind: ClusterRole
  name: strimzi-kafka-broker
  apiGroup: rbac.authorization.k8s.io
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/033-ClusterRoleBinding-strimzi-cluster-operator-kafka-client-delegation.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: strimzi-cluster-operator-kafka-client-delegation
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: client-role-binding
    release: urban-os
    heritage: Helm
# The Kafka clients cluster role must be bound to the cluster operator service account so that it can delegate the
# cluster role to the Kafka clients using it for consuming from closest replica.
# This must be done to avoid escalating privileges which would be blocked by Kubernetes.
subjects:
  - kind: ServiceAccount
    name: strimzi-cluster-operator
    namespace: dev
roleRef:
  kind: ClusterRole
  name: strimzi-kafka-client
  apiGroup: rbac.authorization.k8s.io
---
# Source: urban-os/charts/alchemist/templates/cluster-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: alchemist
rules:
  - apiGroups: [""]
    resources:
      - endpoints
    verbs:
      - get
      - watch
      - list
---
# Source: urban-os/charts/andi/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: andi
rules:
  - apiGroups: [""]
    resources:
      - endpoints
    verbs:
      - get
      - watch
      - list
---
# Source: urban-os/charts/discovery-api/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: discovery-api
rules:
  - apiGroups: [""]
    resources:
      - endpoints
    verbs:
      - get
      - watch
      - list
---
# Source: urban-os/charts/discovery-streams/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: discovery-streams
rules:
  - apiGroups: [""]
    resources:
      - endpoints
    verbs:
      - get
      - watch
      - list
---
# Source: urban-os/charts/forklift/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: forklift
rules:
  - apiGroups: [""]
    resources:
      - endpoints
    verbs:
      - get
      - watch
      - list
---
# Source: urban-os/charts/kafka/templates/kafka-patcher.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kafka-patcher
rules:
  - apiGroups: [""]
    resources:
      - persistentvolumeclaims
    verbs:
      - get
      - patch
---
# Source: urban-os/charts/raptor/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: raptor
rules:
  - apiGroups: [""]
    resources:
      - endpoints
    verbs:
      - get
      - watch
      - list
---
# Source: urban-os/charts/reaper/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: reaper
rules:
  - apiGroups: [""]
    resources:
      - endpoints
    verbs:
      - get
      - watch
      - list
---
# Source: urban-os/charts/valkyrie/templates/cluster-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: valkyrie
rules:
  - apiGroups: [""]
    resources:
      - endpoints
    verbs:
      - get
      - watch
      - list
---
# Source: urban-os/charts/alchemist/templates/cluster-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: alchemist
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: alchemist
subjects:
- kind: ServiceAccount
  name: alchemist
  namespace: dev
---
# Source: urban-os/charts/andi/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: andi
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: andi
subjects:
- kind: ServiceAccount
  name: andi
  namespace: dev
---
# Source: urban-os/charts/discovery-api/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: discovery-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: discovery-api
subjects:
- kind: ServiceAccount
  name: discovery-api
  namespace: dev
---
# Source: urban-os/charts/discovery-streams/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: discovery-streams
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: discovery-streams
subjects:
- kind: ServiceAccount
  name: discovery-streams
  namespace: dev
---
# Source: urban-os/charts/forklift/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: forklift
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: forklift
subjects:
- kind: ServiceAccount
  name: forklift
  namespace: dev
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/020-RoleBinding-strimzi-cluster-operator.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: strimzi-cluster-operator
  namespace: dev
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: role-binding
    release: urban-os
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: strimzi-cluster-operator
    namespace: dev
roleRef:
  kind: ClusterRole
  name: strimzi-cluster-operator-namespaced
  apiGroup: rbac.authorization.k8s.io
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/031-RoleBinding-strimzi-cluster-operator-entity-operator-delegation.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: strimzi-cluster-operator-entity-operator-delegation
  namespace: dev
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: entity-operator-role-binding
    release: urban-os
    heritage: Helm
# The Entity Operator cluster role must be bound to the cluster operator service account so that it can delegate the cluster role to the Entity Operator.
# This must be done to avoid escalating privileges which would be blocked by Kubernetes.
subjects:
  - kind: ServiceAccount
    name: strimzi-cluster-operator
    namespace: dev
roleRef:
  kind: ClusterRole
  name: strimzi-entity-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/032-RoleBinding-strimzi-cluster-operator-topic-operator-delegation.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: strimzi-cluster-operator-topic-operator-delegation
  namespace: dev
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: topic-operator-role-binding
    release: urban-os
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: strimzi-cluster-operator
    namespace: dev
roleRef:
  kind: ClusterRole
  name: strimzi-topic-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: urban-os/charts/kafka/templates/kafka-patcher.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kafka-patcher-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kafka-patcher
subjects:
- kind: ServiceAccount
  name: kafka-patcher
  namespace: dev
---
# Source: urban-os/charts/raptor/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: raptor
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: raptor
subjects:
- kind: ServiceAccount
  name: raptor
  namespace: dev
---
# Source: urban-os/charts/reaper/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: reaper
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: reaper
subjects:
- kind: ServiceAccount
  name: reaper
  namespace: dev
---
# Source: urban-os/charts/valkyrie/templates/cluster-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: valkyrie
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: valkyrie
subjects:
- kind: ServiceAccount
  name: valkyrie
  namespace: dev
---
# Source: urban-os/charts/alchemist/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: alchemist
  namespace: dev
  labels:
    app.kubernetes.io/name: alchemist
  annotations:
    prometheus.io/port: "9002"
    prometheus.io/scrape: "true"
spec:
  selector:
    app.kubernetes.io/name: alchemist
  ports:
  - name: erlang-vm
    protocol: TCP
    port: 9001
    targetPort: 9001
  - name: epmd
    protocol: TCP
    port: 4369
    targetPort: 4369
  type: ClusterIP
---
# Source: urban-os/charts/andi/templates/postgres_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: andi-rds
  labels:
    component: postgres
spec:
  type: ExternalName
  externalName: mdot-dev-postgres.postgres.database.azure.com
---
# Source: urban-os/charts/andi/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: andi
  labels:
    app.kubernetes.io/name: andi
  annotations:
    prometheus.io/port:  "9002"
    prometheus.io/scrape: "true"
spec:
  selector:
    app.kubernetes.io/name: andi
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 4000
  type: NodePort
---
# Source: urban-os/charts/discovery-api/templates/postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: discovery-rds
  labels:
    component: postgres
spec:
  type: ExternalName
  externalName: mdot-dev-postgres.postgres.database.azure.com
---
# Source: urban-os/charts/discovery-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: discovery-api
  namespace: dev
  labels:
    app: discovery-api
  annotations:
    prometheus.io/port:  "9002"
    prometheus.io/scrape: "true"
spec:
  selector:
    app: discovery-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4000
  type: "NodePort"
---
# Source: urban-os/charts/discovery-streams/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: discovery-streams
  namespace: dev
  labels:
    app: discovery-streams
  annotations:
    prometheus.io/port:  "9002"
    prometheus.io/scrape: "true"
spec:
  selector:
    app: discovery-streams
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4000
  type: NodePort
---
# Source: urban-os/charts/discovery-ui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: discovery-ui
  namespace: dev
  labels:
    app: discovery-ui
spec:
  selector:
    app: discovery-ui
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: "NodePort"
---
# Source: urban-os/charts/elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "urban-os"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "urban-os"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: urban-os/charts/elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "urban-os"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: urban-os/charts/external-services/templates/service.yaml
kind: "Service"
apiVersion: "v1"
metadata:
  name: redis
spec:
  type: ExternalName
  externalName: micnotppairc01-p1.redis.cache.windows.net
---
# Source: urban-os/charts/forklift/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: forklift
  namespace: dev
  labels:
    app.kubernetes.io/name: forklift
  annotations:
    prometheus.io/port:  "9002"
    prometheus.io/scrape: "true"
spec:
  selector:
    app.kubernetes.io/name: forklift
  ports:
  - name: erlang-vm
    protocol: TCP
    port: 9001
    targetPort: 9001
  - name: epmd
    protocol: TCP
    port: 4369
    targetPort: 4369
  type: ClusterIP
---
# Source: urban-os/charts/kafka/templates/kafka-exporter/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-exporter
  labels:
    app.kubernetes.io/name: kafka-exporter
  annotations:
    prometheus.io/port:  "9308"
    prometheus.io/scrape: "true"
spec:
  selector:
    app.kubernetes.io/name: kafka-exporter
  ports:
  - name: http
    port: 9308
    protocol: TCP
  type: NodePort
---
# Source: urban-os/charts/kubernetes-data-platform/templates/metastore/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubernetes-data-platform-metastore
  labels:
    component: metastore
    environment: sandbox
    release: urban-os
    source: helm
spec:
  type: ClusterIP
  ports:
  - port: 9083
    targetPort: metastore
    name: metastore
  selector:
    component: metastore
    environment: sandbox
    release: urban-os
    source: helm
---
# Source: urban-os/charts/kubernetes-data-platform/templates/postgres/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubernetes-data-platform-postgres
  labels:
    component: postgres
    environment: sandbox
    release: urban-os
    source: helm
spec:
  type: ExternalName
  externalName: mdot-dev-postgres.postgres.database.azure.com
---
# Source: urban-os/charts/kubernetes-data-platform/templates/presto/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubernetes-data-platform-presto
  labels:
    component: presto
    role: coordinator
    environment: sandbox
    release: urban-os
    source: helm
  annotations:
    prometheus.io/port:  "9483"
    prometheus.io/scrape: "true"
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: http-coord
    name: http-coord
  - port: 9483
    targetPort: metric-port
    name: metric-port
  selector:
    component: presto
    role: coordinator
    environment: sandbox
    release: urban-os
    source: helm
---
# Source: urban-os/charts/raptor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: raptor
  namespace: dev
  labels:
    app: raptor
  annotations:
    prometheus.io/port:  "9002"
    prometheus.io/scrape: "true"
spec:
  selector:
    app: raptor
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4000
  type: NodePort
---
# Source: urban-os/charts/reaper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: reaper
  namespace: dev
  labels:
    app.kubernetes.io/name: reaper
  annotations:
    prometheus.io/port: "9002"
    prometheus.io/scrape: "true"
spec:
  selector:
    app.kubernetes.io/name: reaper
  ports:
  - name: metrics
    protocol: TCP
    port: 9092
    targetPort: reaper
  - name: erlang-vm
    protocol: TCP
    port: 9001
    targetPort: 9001
  - name: epmd
    protocol: TCP
    port: 4369
    targetPort: 4369
  type: ClusterIP
---
# Source: urban-os/charts/valkyrie/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: valkyrie
  namespace: dev
  labels:
    app.kubernetes.io/name: valkyrie
  annotations:
    prometheus.io/port: "9002"
    prometheus.io/scrape: "true"
spec:
  selector:
    app.kubernetes.io/name: valkyrie
  ports:
  - name: erlang-vm
    protocol: TCP
    port: 9001
    targetPort: 9001
  - name: epmd
    protocol: TCP
    port: 4369
    targetPort: 4369
  type: ClusterIP
---
# Source: urban-os/charts/alchemist/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: urban-os-alchemist
  labels:
    app.kubernetes.io/name: alchemist
    helm.sh/chart: alchemist-1.0.1
    app.kubernetes.io/instance: urban-os
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: alchemist
      app.kubernetes.io/instance: urban-os
  template:
    metadata:
      labels:
        app.kubernetes.io/name: alchemist
        app.kubernetes.io/instance: urban-os
    spec:
      serviceAccountName: alchemist
      containers:
        - name: alchemist
          image: "smartcitiesdata/alchemist:development"
          imagePullPolicy: Always
          ports:
          - containerPort: 9001
          - containerPort: 4369
          env:
          - name: KAFKA_BROKERS
            value: pipeline-kafka-bootstrap:9092
          - name: RUN_IN_KUBERNETES
            value: "true"
          - name: INPUT_TOPIC_PREFIX
            value: raw
          - name: OUTPUT_TOPIC_PREFIX
            value: transformed
          - name: DLQ_TOPIC
            value: streaming-dead-letters
          - name: REDIS_HOST
            value: redis-master
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "urban-os-redis-password"
                key: "urban-os-redis-password"
          - name: REDIS_SSL
            value: "false"
          - name: PROCESSOR_STAGES
            value: "1"
          - name: PROFILING_ENABLED
            value: "false"
          - name: METRICS_PORT
            value: "9002"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 300m
              memory: 512Mi
---
# Source: urban-os/charts/andi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: andi
  labels:
    app.kubernetes.io/name: andi
    helm.sh/chart: andi-2.2.1
    app.kubernetes.io/instance: andi
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: andi
      app.kubernetes.io/instance: andi
  template:
    metadata:
      labels:
        app.kubernetes.io/name: andi
        app.kubernetes.io/instance: andi
    spec:
      serviceAccountName: andi
      containers:
        - name: andi
          resources:
            limits:
              cpu: 150m
              memory: 256Mi
            requests:
              cpu: 150m
              memory: 256Mi
          ports:
            - containerPort: 80
          image: "smartcitiesdata/andi:development"
          imagePullPolicy: Always
          env:
          - name: REDIS_HOST
            value: redis-master
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "urban-os-redis-password"
                key: "urban-os-redis-password"
          - name: REDIS_SSL
            value: "false"
          - name: KAFKA_BROKERS
            value: pipeline-kafka-bootstrap:9092
          - name: METRICS_PORT
            value: "9002"
          - name: RUN_IN_KUBERNETES
            value: "true"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: NODE_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: LIVEVIEW_SALT
            valueFrom:
              secretKeyRef:
                name: andi-lv-salt
                key: salt
          - name: POSTGRES_HOST
            value: mdot-dev-postgres.postgres.database.azure.com
          - name: POSTGRES_DBNAME
            value: andi
          - name: POSTGRES_USER
            value: padmin
          - name: POSTGRES_PASSWORD
            value: '96aeCcKV8gx5UX'
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_VERIFY_SNI
            value: "false"
          - name: SECRETS_ENDPOINT
            value: vault:8200
          - name: AUTH0_DOMAIN
            value: "mdot-dev.us.auth0.com"
          - name: AUTH0_CLIENT_ID
            value: "GUrz6X2EeGphf8bbzSNlOr9Iszh3yLWq"
          - name: AUTH_JWT_ISSUER
            value: "https://mdot-dev.us.auth0.com/"
          - name: DOCUMENTATION_ROOT
            value: ""
          - name: ACCESS_LEVEL
            value: "private"
          - name: VAULT_ROLE
            value: "andi-role"
          - name: HOSTED_FILE_BUCKET
            value: andi-public-sample-datasets
          - name: HOSTED_FILE_REGION
            value: us-west-2
          - name: AUTH0_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: urban-os-andi-auth0-client-secret
                key: auth0_client_secret
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: urban-os-andi-aws-credentials
                key: aws_access_key_id
          - name: AWS_ACCESS_KEY_SECRET
            valueFrom:
              secretKeyRef:
                name: urban-os-andi-aws-credentials
                key: aws_access_key_secret
          
          - name: S3_HOST_NAME
            value: minio.minio
          - name: S3_PORT
            value: "9000"
          - name: ALLOWED_ORIGIN
            value: "http://*.internal.apps.hsrqs9l3.eastus.aroapp.io"
          
      tolerations:
        - effect: NoExecute
          key: example.run.public-worker
          operator: Equal
          value: "true"
---
# Source: urban-os/charts/discovery-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discovery-api
  namespace: dev
  labels:
    app: discovery-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discovery-api
  template:
    metadata:
      labels:
        app: discovery-api
    spec:
      serviceAccountName: discovery-api
      containers:
      - name: discovery-api
        image: smartcitiesdata/discovery_api:development
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 1
            memory: 512Mi
          requests:
            cpu: 1
            memory: 512Mi
        env:
          - name: KAFKA_BROKERS
            value: pipeline-kafka-bootstrap:9092
          - name: REDIS_HOST
            value: redis-master
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "urban-os-redis-password"
                key: "urban-os-redis-password"
          - name: REDIS_SSL
            value: "false"
          - name: PRESTO_URL
            value: http://kubernetes-data-platform-presto:8080
          - name: PRESTO_CATALOG
            value: hive
          - name: PRESTO_SCHEMA
            value: default
          - name: HOST
            value: data.dev.apps.hsrqs9l3.eastus.aroapp.io
          - name: ALLOWED_ORIGINS
            value: apps.hsrqs9l3.eastus.aroapp.io,internal.apps.hsrqs9l3.eastus.aroapp.io
          - name: PRESIGN_KEY
            valueFrom:
              secretKeyRef:
                name: discovery-api-presign-key
                key: discovery-api-presign-key
          - name: GUARDIAN_KEY
            valueFrom:
              secretKeyRef:
                name: guardian-secret-key
                key: guardian-secret-key
          - name: HOSTED_FILE_BUCKET
            value: hosted-dataset-files
          - name: HOSTED_FILE_REGION
            value: us-west-2
          - name: POSTGRES_HOST
            value: mdot-dev-postgres.postgres.database.azure.com
          - name: POSTGRES_DBNAME
            value: discovery
          - name: POSTGRES_USER
            value: padmin
          - name: POSTGRES_PASSWORD
            value: "96aeCcKV8gx5UX"
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_VERIFY_SNI
            value: "false"
          - name: AUTH_JWT_ISSUER
            value: "https://mdot-dev.us.auth0.com/"
          - name: AUTH_JWKS_ENDPOINT
            value: "https://mdot-dev.us.auth0.com/.well-known/jwks.json"
          - name: AUTH_USER_INFO_ENDPOINT
            value: "https://mdot-dev.us.auth0.com/userinfo"
          - name: AUTH_DOMAIN
            value: "mdot-dev.us.auth0.com"
          - name: AUTH_CLIENT_ID
            value: "Xfj3PM4QBj0luV20sqIAlfUKqxz29fkd"
          - name: AUTH_REDIRECT_BASE_URL
            value: "http://localhost"
          - name: ELASTICSEARCH_HOST
            value: elasticsearch-master:9200
          - name: ELASTICSEARCH_TLS_ENABLED
            value: "false"
          - name: METRICS_PORT
            value: "9002"
          - name: RAPTOR_URL
            value: "http://raptor/api"
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: urban-os-discovery-api-aws-credentials
                key: aws_access_key_id
          - name: AWS_ACCESS_KEY_SECRET
            valueFrom:
              secretKeyRef:
                name: urban-os-discovery-api-aws-credentials
                key: aws_access_key_secret
          
          - name: S3_HOST_NAME
            value: minio.minio
          - name: S3_PORT
            value: "9000"
---
# Source: urban-os/charts/discovery-streams/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discovery-streams
  namespace: dev
  labels:
    app: discovery-streams
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discovery-streams
  template:
    metadata:
      labels:
        app: discovery-streams
    spec:
      serviceAccountName: discovery-streams
      imagePullSecrets:
      - name: regcred
      containers:
      - name: discovery-streams
        image: smartcitiesdata/discovery_streams:development
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 500m
            memory: 500M
          requests:
            cpu: 500m
            memory: 500M
        env:
        - name: KAFKA_BROKERS
          value: pipeline-kafka-bootstrap:9092
        - name: REDIS_HOST
          value: redis-master
        - name: REDIS_SSL
          value: "false"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "urban-os-redis-password"
              key: "urban-os-redis-password"
        - name: RUN_IN_KUBERNETES
          value: "true"
        - name: RAPTOR_URL
          value: "http://raptor/api"
        - name: METRICS_PORT
          value: "9002"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
---
# Source: urban-os/charts/discovery-ui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discovery-ui
  namespace: dev
  labels:
    app: discovery-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discovery-ui
  template:
    metadata:
      labels:
        app: discovery-ui
    spec:
      imagePullSecrets:
      - name: regcred
      containers:
      - name: discovery-ui
        image: quay.io/smartcitiesdata/discovery_ui:v5
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /opt/app-root/src/config.js
          name: discovery-ui-configs
          subPath: config.js
        - mountPath: /opt/app-root/etc/nginx.default.d/default.conf
          name: discovery-ui-configs
          subPath: default.conf
      volumes:
      - name: discovery-ui-configs
        configMap:
          name: discovery-ui-configs
---
# Source: urban-os/charts/forklift/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: forklift
  labels:
    app.kubernetes.io/name: forklift
    helm.sh/chart: forklift-3.1.6
    app.kubernetes.io/instance: urban-os
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: forklift
      app.kubernetes.io/instance: urban-os
  template:
    metadata:
      labels:
        app.kubernetes.io/name: forklift
        app.kubernetes.io/instance: urban-os
    spec:
      serviceAccountName: forklift
      containers:
        - name: forklift
          image: "smartcitiesdata/forklift:development"
          imagePullPolicy: Always
          ports:
          - containerPort: 9001
          - containerPort: 4369
          env:
          - name: KAFKA_BROKERS
            value: pipeline-kafka-bootstrap:9092
          - name: PRESTO_URL
            value: http://kubernetes-data-platform-presto:8080
          - name: RUN_IN_KUBERNETES
            value: "true"
          - name: REDIS_HOST
            value: redis-master
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "urban-os-redis-password"
                key: "urban-os-redis-password"
          - name: REDIS_SSL
            value: "false"
          - name: DATA_TOPIC_PREFIX
            value: validated
          - name: OUTPUT_TOPIC
            value: streaming-persisted
          - name: PRESTO_USER
            value: forklift
          - name: METRICS_PORT
            value: "9002"
          - name: PROFILING_ENABLED
            value: "false"
          
          - name: COMPACTION_SCHEDULE
            value: "0 * * * *"
          
          - name: AWS_ACCESS_KEY_ID
            value: "ZCVGOsbnHUBMelrlcc4AvJEfUgk5xvmsNtcCFuGD"
          
          - name: AWS_SECRET_ACCESS_KEY
            value: "0doQJevNCMHz2N7jvylasK3VWEzUHcTf8YGY0VfY"
          
          - name: S3_HOST_NAME
            value: minio.dev.svc.cluster.local
          - name: S3_PORT
            value: "80"
          
          - name: S3_WRITER_BUCKET
            value: presto-hive-storage
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: NODE_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 500m
              memory: 500M
---
# Source: urban-os/charts/kafka/charts/strimzi-kafka-operator/templates/060-Deployment-strimzi-cluster-operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: strimzi-cluster-operator
  labels:
    app: strimzi
    chart: strimzi-kafka-operator-0.23.0
    component: deployment
    release: urban-os
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      name: strimzi-cluster-operator
      strimzi.io/kind: cluster-operator
  template:
    metadata:
      labels:
        name: strimzi-cluster-operator
        strimzi.io/kind: cluster-operator
    spec:
      serviceAccountName: strimzi-cluster-operator
      volumes:
        - name: strimzi-tmp
          emptyDir:
            medium: Memory
        - name: co-config-volume
          configMap:
            name: strimzi-cluster-operator
      containers:
        - name: strimzi-cluster-operator
          image: quay.io/strimzi/operator:0.23.0
          ports:
            - containerPort: 8080
              name: http
          args:
            - /opt/strimzi/bin/cluster_operator_run.sh
          volumeMounts:
            - name: strimzi-tmp
              mountPath: /tmp
            - name: co-config-volume
              mountPath: /opt/strimzi/custom-config/
          env:
            - name: STRIMZI_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: STRIMZI_FULL_RECONCILIATION_INTERVAL_MS
              value: "120000"
            - name: STRIMZI_OPERATION_TIMEOUT_MS
              value: "300000"
            - name: STRIMZI_DEFAULT_TLS_SIDECAR_ENTITY_OPERATOR_IMAGE
              value: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
            - name: STRIMZI_DEFAULT_KAFKA_EXPORTER_IMAGE
              value: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
            - name: STRIMZI_DEFAULT_CRUISE_CONTROL_IMAGE
              value: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
            - name: STRIMZI_DEFAULT_TLS_SIDECAR_CRUISE_CONTROL_IMAGE
              value: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
            - name: STRIMZI_KAFKA_IMAGES
              value: |                 
                2.6.0=quay.io/strimzi/kafka:0.23.0-kafka-2.6.0
                2.6.1=quay.io/strimzi/kafka:0.23.0-kafka-2.6.1
                2.6.2=quay.io/strimzi/kafka:0.23.0-kafka-2.6.2
                2.7.0=quay.io/strimzi/kafka:0.23.0-kafka-2.7.0
                2.8.0=quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
            - name: STRIMZI_KAFKA_CONNECT_IMAGES
              value: |                 
                2.6.0=quay.io/strimzi/kafka:0.23.0-kafka-2.6.0
                2.6.1=quay.io/strimzi/kafka:0.23.0-kafka-2.6.1
                2.6.2=quay.io/strimzi/kafka:0.23.0-kafka-2.6.2
                2.7.0=quay.io/strimzi/kafka:0.23.0-kafka-2.7.0
                2.8.0=quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
            - name: STRIMZI_KAFKA_CONNECT_S2I_IMAGES
              value: |                 
                2.6.0=quay.io/strimzi/kafka:0.23.0-kafka-2.6.0
                2.6.1=quay.io/strimzi/kafka:0.23.0-kafka-2.6.1
                2.6.2=quay.io/strimzi/kafka:0.23.0-kafka-2.6.2
                2.7.0=quay.io/strimzi/kafka:0.23.0-kafka-2.7.0
                2.8.0=quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
            - name: STRIMZI_KAFKA_MIRROR_MAKER_IMAGES
              value: |                 
                2.6.0=quay.io/strimzi/kafka:0.23.0-kafka-2.6.0
                2.6.1=quay.io/strimzi/kafka:0.23.0-kafka-2.6.1
                2.6.2=quay.io/strimzi/kafka:0.23.0-kafka-2.6.2
                2.7.0=quay.io/strimzi/kafka:0.23.0-kafka-2.7.0
                2.8.0=quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
            - name: STRIMZI_KAFKA_MIRROR_MAKER_2_IMAGES
              value: |                 
                2.6.0=quay.io/strimzi/kafka:0.23.0-kafka-2.6.0
                2.6.1=quay.io/strimzi/kafka:0.23.0-kafka-2.6.1
                2.6.2=quay.io/strimzi/kafka:0.23.0-kafka-2.6.2
                2.7.0=quay.io/strimzi/kafka:0.23.0-kafka-2.7.0
                2.8.0=quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
            - name: STRIMZI_DEFAULT_TOPIC_OPERATOR_IMAGE
              value: quay.io/strimzi/operator:0.23.0
            - name: STRIMZI_DEFAULT_USER_OPERATOR_IMAGE
              value: quay.io/strimzi/operator:0.23.0
            - name: STRIMZI_DEFAULT_KAFKA_INIT_IMAGE
              value: quay.io/strimzi/operator:0.23.0
            - name: STRIMZI_DEFAULT_KAFKA_BRIDGE_IMAGE
              value: quay.io/strimzi/kafka-bridge:0.19.0
            - name: STRIMZI_DEFAULT_JMXTRANS_IMAGE
              value: quay.io/strimzi/jmxtrans:0.23.0
            - name: STRIMZI_DEFAULT_KANIKO_EXECUTOR_IMAGE
              value: quay.io/strimzi/kaniko-executor:0.23.0
            - name: STRIMZI_OPERATOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
            - name: STRIMZI_FEATURE_GATES
              value: ""
          livenessProbe:
            httpGet:
              path: /healthy
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          resources:
            limits:
              cpu: 500m
              memory: 384Mi
            requests:
              cpu: 100m
              memory: 384Mi
  strategy:
    type: Recreate
---
# Source: urban-os/charts/kafka/templates/kafka-exporter/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-exporter
  labels:
    app.kubernetes.io/name: kafka-exporter
    app.kubernetes.io/instance: urban-os
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka-exporter
      app.kubernetes.io/instance: urban-os
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka-exporter
        app.kubernetes.io/instance: urban-os
    spec:
      containers:
        - name: kafka-exporter
          ports:
            - containerPort: 9308
          image: "danielqsj/kafka-exporter:v1.3.1"
          args: ["--kafka.server=pipeline-kafka-bootstrap:9092"]
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 1Gi
              cpu: 500m
            requests:
              memory: 512Mi
              cpu: 300m
---
# Source: urban-os/charts/kubernetes-data-platform/templates/metastore/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubernetes-data-platform-metastore
  labels:
    component: metastore
    environment: sandbox
    release: urban-os
    source: helm
spec:
  selector:
    matchLabels:
      component: metastore
      environment: sandbox
      release: urban-os
      source: helm
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/core-site-configmap: bde630f40ce47fb1ce1a4e34977a111099a3702080cf558eb29a325e8fd40824
        checksum/metastore-site-configmap: b23aef0d1cb809435db4d8f39082f9b3cf3412e8f2f9667ffd4a4fd97d2ddb1f
        prometheus.io/port: "8181"
        prometheus.io/scrape: "true"
      labels:
        component: metastore
        environment: sandbox
        release: urban-os
        source: helm
    spec:
      initContainers:
      - name: init-schema
        image: smartcitiesdata/metastore:openshift
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 2Gi
        command:
        - /bin/bash
        - -c
        args:
        - /opt/hive-metastore/bin/schematool -dbType postgres -validate || /opt/hive-metastore/bin/schematool -dbType postgres -initSchema
        volumeMounts:
        - mountPath: /opt/hive-metastore/conf/metastore-site.xml
          name: metastore-site
          subPath: metastore-site.xml
      containers:
      - name: metastore
        image: smartcitiesdata/metastore:openshift
        imagePullPolicy: Always
        command:
        - /opt/hive-metastore/bin/start-metastore
        ports:
        - containerPort: 9083
          name: metastore
        volumeMounts:
        - mountPath: /opt/hive-metastore/conf/metastore-site.xml
          name: metastore-site
          subPath: metastore-site.xml
        - mountPath: /opt/hadoop/etc/hadoop/core-site.xml
          name: core-site
          subPath: core-site.xml
        - mountPath: /opt/hive-metastore/jmx_exporter_config.yaml
          name: metastore-configs
          subPath: jmx_exporter_config.yaml
        env:
        - name: HADOOP_OPTS
          value: >
            -server
            -Xmx768M
            -XX:+UseG1GC
            -XX:G1HeapRegionSize=32M
            -XX:+UseGCOverheadLimit
            -XX:+ExplicitGCInvokesConcurrent
            -XX:+HeapDumpOnOutOfMemoryError
            -XX:+ExitOnOutOfMemoryError
            -javaagent:/opt/hive-metastore/jmx_exporter.jar=8181:/opt/hive-metastore/jmx_exporter_config.yaml
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 2Gi
      volumes:
      - name: metastore-site
        configMap:
          name: kubernetes-data-platform-metastore-config
      - name: core-site
        configMap:
          name: kubernetes-data-platform-core-site
      - name: metastore-configs
        configMap:
          name: kubernetes-data-platform-metastore-metastore-configs
---
# Source: urban-os/charts/kubernetes-data-platform/templates/presto/coordinator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubernetes-data-platform-presto-coord
  labels:
    component: presto
    role: coordinator
    environment: sandbox
    release: urban-os
    source: helm
spec:
  selector:
    matchLabels:
      component: presto
      role: coordinator
      environment: sandbox
      release: urban-os
      source: helm
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/coordinator-configmap: 0c070fc2457f83e73c50c6035d2bcc8152dae31c2b96dd10c7e62232d17fede6
        checksum/common-configmap: d001024edbba9e8f5fac0be280c1126079273b6a883869a7628ba1cf83634bf7
        checksum/core-site-configmap: bde630f40ce47fb1ce1a4e34977a111099a3702080cf558eb29a325e8fd40824
        prometheus.io/port: "8181"
        prometheus.io/scrape: "true"
      labels:
        component: presto
        role: coordinator
        environment: sandbox
        release: urban-os
        source: helm
    spec:
      containers:
      - name: presto-coordinator
        image: smartcitiesdata/presto:openshift
        imagePullPolicy: Always
        command:
        - "launcher"
        args:
        - "run"
        volumeMounts:
        - mountPath: /presto/etc/node.properties
          name: presto-configs
          subPath: node.properties
        - mountPath: /presto/etc/jvm.config
          name: presto-configs
          subPath: jvm.config
        - mountPath: /presto/etc/config.properties
          name: coordinator-config
          subPath: config.properties
        - mountPath: /presto/etc/log.properties
          name: presto-configs
          subPath: log.properties
        - mountPath: /presto/etc/catalog/hive.properties
          name: presto-configs
          subPath: hive.properties
        - mountPath: /etc/hadoop/conf/core-site.xml
          name: core-site
          subPath: core-site.xml
        - mountPath: /presto/etc/jmx_exporter_config.yaml
          name: presto-configs
          subPath: jmx_exporter_config.yaml
        ports:
        - name: http-coord
          containerPort: 8080
        - name: jmx-exporter
          containerPort: 8181
        livenessProbe:
          httpGet:
            path: /v1/cluster
            port: http-coord
          failureThreshold: 12
        readinessProbe:
          httpGet:
            path: /v1/cluster
            port: http-coord
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
      volumes:
      - name: presto-configs
        configMap:
          name: kubernetes-data-platform-presto-configs
      - name: coordinator-config
        configMap:
          name: kubernetes-data-platform-presto-coordinator
      - name: core-site
        configMap:
          name: kubernetes-data-platform-core-site
---
# Source: urban-os/charts/kubernetes-data-platform/templates/presto/worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubernetes-data-platform-presto-worker
  labels:
    component: presto
    role: worker
    environment: sandbox
    release: urban-os
    source: helm
spec:
  selector:
    matchLabels:
      component: presto
      role: worker
      environment: sandbox
      release: urban-os
      source: helm
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/worker-configmap: 68f347eed8fa1bfd54f6f7085f76a14d00a0981df5af6526c6e3db2d50b9a6c7
        checksum/common-configmap: d001024edbba9e8f5fac0be280c1126079273b6a883869a7628ba1cf83634bf7
        checksum/core-site-configmap: bde630f40ce47fb1ce1a4e34977a111099a3702080cf558eb29a325e8fd40824
        prometheus.io/port: "8181"
        prometheus.io/scrape: "true"
      labels:
        component: presto
        role: worker
        environment: sandbox
        release: urban-os
        source: helm
    spec:
      containers:
      - name: presto-worker
        image: smartcitiesdata/presto:openshift
        imagePullPolicy: Always
        command:
        - "launcher"
        args:
        - "run"
        volumeMounts:
        - mountPath: /presto/etc/node.properties
          name: presto-configs
          subPath: node.properties
        - mountPath: /presto/etc/jvm.config
          name: presto-configs
          subPath: jvm.config
        - mountPath: /presto/etc/jmx_exporter_config.yaml
          name: presto-configs
          subPath: jmx_exporter_config.yaml
        - mountPath: /presto/etc/config.properties
          name: worker-config
          subPath: config.properties
        - mountPath: /presto/etc/log.properties
          name: presto-configs
          subPath: log.properties
        - mountPath: /presto/etc/health_check.sh
          name: worker-config
          subPath: health_check.sh
        - mountPath: /presto/etc/catalog/hive.properties
          name: presto-configs
          subPath: hive.properties
        - mountPath: /etc/hadoop/conf/core-site.xml
          name: core-site
          subPath: core-site.xml
        ports:
        - name: jmx-exporter
          containerPort: 8181
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - /presto/etc/health_check.sh
          initialDelaySeconds: 10
          periodSeconds: 25
          failureThreshold: 12
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - /presto/etc/health_check.sh
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
      volumes:
      - name: presto-configs
        configMap:
          name: kubernetes-data-platform-presto-configs
      - name: worker-config
        configMap:
          name: kubernetes-data-platform-presto-worker
      - name: core-site
        configMap:
          name: kubernetes-data-platform-core-site
---
# Source: urban-os/charts/raptor/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: raptor
  namespace: dev
  labels:
    app: raptor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: raptor
  template:
    metadata:
      labels:
        app: raptor
    spec:
      serviceAccountName: raptor
      imagePullSecrets:
      - name: regcred
      containers:
      - name: raptor
        image: smartcitiesdata/raptor:development
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 500m
            memory: 500M
          requests:
            cpu: 500m
            memory: 500M
        env:
        - name: KAFKA_BROKERS
          value: pipeline-kafka-bootstrap:9092
        - name: REDIS_HOST
          value: redis-master
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "urban-os-redis-password"
              key: "urban-os-redis-password"
        - name: REDIS_SSL
          value: "false"
        - name: RUN_IN_KUBERNETES
          value: "true"
        - name: METRICS_PORT
          value: "9002"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: AUTH0_DOMAIN
          value: "mdot-dev.us.auth0.com"
        - name: AUTH0_CLIENT_ID
          value: "GUrz6X2EeGphf8bbzSNlOr9Iszh3yLWq"
        - name: AUTH0_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: urban-os-raptor-auth0-client-secret
              key: auth0_client_secret
---
# Source: urban-os/charts/reaper/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reaper
  namespace: dev
  labels:
    helm.sh/chart: reaper-1.2.4
    app.kubernetes.io/name: reaper
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: reaper
      app.kubernetes.io/instance: urban-os
  template:
    metadata:
      labels:
        app.kubernetes.io/name: reaper
        app.kubernetes.io/instance: urban-os
    spec:
      serviceAccountName: reaper
      imagePullSecrets:
      - name: regcred
      containers:
      - name: reaper
        image: smartcitiesdata/reaper:development
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 300m
            ephemeral-storage: 15G
            memory: 1Gi
          requests:
            cpu: 300m
            ephemeral-storage: 15G
            memory: 1Gi
        ports:
        - containerPort: 9001
        - containerPort: 4369
        volumeMounts:
        - mountPath: /downloads
          name: download-dir
        env:
        - name: OUTPUT_TOPIC_PREFIX
          value: raw
        - name: DLQ_TOPIC
          value: streaming-dead-letters
        - name: KAFKA_BROKERS
          value: pipeline-kafka-bootstrap:9092
        - name: RUN_IN_KUBERNETES
          value: "true"
        - name: REDIS_HOST
          value: redis-master
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "urban-os-redis-password"
              key: "urban-os-redis-password"
        - name: REDIS_SSL
          value: "false"
        - name: SECRETS_ENDPOINT
          value: vault:8200
        - name: HOSTED_FILE_BUCKET
          value: hosted-dataset-files
        - name: AWS_REGION
          value: us-west-2
        - name: PROFILING_ENABLED
          value: "false"
        - name: METRICS_PORT
          value: "9002"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: urban-os-reaper-aws-credentials
              key: aws_access_key_id
        - name: AWS_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: urban-os-reaper-aws-credentials
              key: aws_access_key_secret
      volumes:
      - name: download-dir
        emptyDir: {}
---
# Source: urban-os/charts/valkyrie/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: valkyrie
  labels:
    app.kubernetes.io/name: valkyrie
    helm.sh/chart: valkyrie-2.6.4
    app.kubernetes.io/instance: urban-os
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: valkyrie
      app.kubernetes.io/instance: urban-os
  template:
    metadata:
      labels:
        app.kubernetes.io/name: valkyrie
        app.kubernetes.io/instance: urban-os
    spec:
      serviceAccountName: valkyrie
      containers:
        - name: valkyrie
          image: "smartcitiesdata/valkyrie:development"
          imagePullPolicy: Always
          ports:
          - containerPort: 9001
          - containerPort: 4369
          env:
          - name: KAFKA_BROKERS
            value: pipeline-kafka-bootstrap:9092
          - name: RUN_IN_KUBERNETES
            value: "true"
          - name: INPUT_TOPIC_PREFIX
            value: transformed
          - name: OUTPUT_TOPIC_PREFIX
            value: validated
          - name: DLQ_TOPIC
            value: streaming-dead-letters
          - name: REDIS_HOST
            value: redis-master
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "urban-os-redis-password"
                key: "urban-os-redis-password"
          - name: REDIS_SSL
            value: "false"
          - name: PROCESSOR_STAGES
            value: "1"
          - name: PROFILING_ENABLED
            value: "false"
          - name: METRICS_PORT
            value: "9002"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          resources:
            limits:
              cpu: 300m
              memory: 512Mi
            requests:
              cpu: 300m
              memory: 512Mi
---
# Source: urban-os/charts/elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "urban-os"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "7"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 30Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "urban-os"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000670000
        runAsUser: 1000670000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elasticsearch-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
      enableServiceLinks: true
      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000670000
        image: "docker.elastic.co/elasticsearch/elasticsearch:7.14.0"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                    set -- "$@" -u "${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                  fi

                  curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "7" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elasticsearch-master-0,elasticsearch-master-1,"
          - name: discovery.seed_hosts
            value: "elasticsearch-master-headless"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: node.data
            value: "true"
          - name: node.ingest
            value: "true"
          - name: node.master
            value: "true"
          - name: node.ml
            value: "true"
          - name: node.remote_cluster_client
            value: "true"
        volumeMounts:
          - name: "elasticsearch-master"
            mountPath: /usr/share/elasticsearch/data
---
# Source: urban-os/charts/andi/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: andi
  namespace: dev
  annotations:
spec:
  rules:
  - host: andi.dev.internal.apps.hsrqs9l3.eastus.aroapp.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: andi
            port:
              number: 80
---
# Source: urban-os/charts/discovery-api/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: discovery-api
  namespace: dev
  annotations:
    route.openshift.io/termination: edge
spec:
  rules:
  - host: data.dev.apps.hsrqs9l3.eastus.aroapp.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: discovery-api
            port:
              number: 80
  - host: data.dev.internal.apps.hsrqs9l3.eastus.aroapp.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: discovery-api
            port:
              number: 80
---
# Source: urban-os/charts/discovery-streams/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: discovery-streams
  namespace: dev
  annotations:
spec:
  rules:
  - host: streams.dev.apps.hsrqs9l3.eastus.aroapp.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: discovery-streams
            port:
              number: 80
---
# Source: urban-os/charts/discovery-ui/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: discovery-ui
  namespace: dev
  annotations:
    route.openshift.io/termination: edge
spec:
  rules:
  - host: discovery.dev.apps.hsrqs9l3.eastus.aroapp.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: discovery-ui
            port:
              number: 80
  - host: discovery.dev.internal.apps.hsrqs9l3.eastus.aroapp.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: discovery-ui
            port:
              number: 80
---
# Source: urban-os/charts/kubernetes-data-platform/templates/presto/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/healthcheck-path: /v1/cluster
  name: kubernetes-data-platform-presto
  labels:
    component: presto
    role: coordinator
    environment: sandbox
    release: urban-os
    source: helm
spec:
  rules:
  - host: presto.dev.internal.apps.hsrqs9l3.eastus.aroapp.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kubernetes-data-platform-presto
            port:
              number: 8080
---
# Source: urban-os/charts/kafka/templates/kafka.yml
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: pipeline
spec:
  kafka:
    version: 2.6.2
    replicas: 1
    listeners:
    - name: plain
      port: 9092
      type: internal
      tls: false
    config:
      num.partitions: 30
      default.replication.factor: 1
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      auto.create.topics.enable: false
    storage:
      type: persistent-claim
      size: 100Gi
      deleteClaim: false
    readinessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 45
    livenessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 45
    resources:
      limits:
        cpu: 1
        memory: 5000M
      requests:
        cpu: 1
        memory: 5000M
    rack:
      topologyKey: "kubernetes.io/hostname"
  zookeeper:
    replicas: 1
    readinessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 45
    livenessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 45
    storage:
      type: persistent-claim
      size: 1Gi
      deleteClaim: false
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 200m
        memory: 512Mi
  entityOperator:
    topicOperator:
      resources:
        requests:
          cpu: "100m"
          memory: 512Mi
        limits:
          cpu: "500m"
          memory: 512Mi
    tlsSidecar:
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
---
# Source: urban-os/charts/kafka/templates/topics.yaml
apiVersion: kafka.strimzi.io/v1beta1
kind: KafkaTopic
metadata:
  name: streaming-persisted
  namespace: dev
  labels:
    strimzi.io/cluster: pipeline
spec:
  partitions: 1
  replicas: 1
  config: {}
---
# Source: urban-os/charts/kafka/templates/topics.yaml
apiVersion: kafka.strimzi.io/v1beta1
kind: KafkaTopic
metadata:
  name: streaming-dead-letters
  namespace: dev
  labels:
    strimzi.io/cluster: pipeline
spec:
  partitions: 1
  replicas: 1
  config: {}
---
# Source: urban-os/charts/kafka/templates/topics.yaml
apiVersion: kafka.strimzi.io/v1beta1
kind: KafkaTopic
metadata:
  name: event-stream
  namespace: dev
  labels:
    strimzi.io/cluster: pipeline
spec:
  partitions: 1
  replicas: 1
  config: {}

