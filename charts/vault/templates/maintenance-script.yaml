apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-maintenance-script
  labels:
    helm.sh/chart: {{ include "vault.chart" . }}
    app.kubernetes.io/name: {{ include "vault.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  maintenance.sh: |
    #!bin/sh

    init_status() {
      local status
      status=$(curl http://localhost:8200/v1/sys/health | jq .initialized)
      [[ "${status}" == "true" ]] && return 0 || return 1
    }

    sealed_status() {
      local status
      status=$(curl http://localhost:8200/v1/sys/health | jq .sealed)
      [[ "${status}" == "true" ]] && return 0 || return 1
    }

    init_vault() {
      secrets=$(mktemp)
      trap "rm -rf ${secrets}" EXIT

      init_results=$(vault operator init | grep ':' > "${secrets}")
      keys=$(cat "${secrets}" | grep "^Unseal Key" | awk "{print \$4}")
      root_token=$(cat "${secrets}" | grep "^Initial Root Token:" | awk "{print \$4}")

      key_count=1
      for key in $keys
      do
        vault operator unseal $key
        kubectl -n {{ .Release.Namespace }} delete secret key${key_count} --ignore-not-found
        kubectl -n {{ .Release.Namespace }} create secret generic key${key_count} --from-literal=key${key_count}=$key
        key_count=$((key_count+1))
      done

      vault login ${root_token}

      vault secrets enable -path={{ .Values.vault.secretsPath }} kv

      write_access_policies

      {{ if eq .Values.authMethod "ldap" }}
      enable_ldap
      {{ else }}
      enable_username_pass
      {{ end }}

      enable_kubernetes

      vault token revoke ${root_token}
      exit 0
    }

    unseal_vault() {
      key_count=1
      for key in $(seq 1 5)
      do
        vault operator unseal $(kubectl -n {{ .Release.Namespace }} get secret key${key_count} -o jsonpath="{.data.key${key_count}}" | base64 -d)
        key_count=$((key_count+1))
      done
    }

    init_and_unseal() {
      if init_status; then
        if sealed_status; then
          echo "Unsealing the vault"
          unseal_vault
          exit 0
        else
          echo "Vault already unsealed; no-op"
          exit 0
        fi
      else
        echo "Initializing the vault"
        init_vault
        exit 0
      fi
    }

    write_access_policies() {
      vault policy write admin /vault/config/admin_policy.hcl
      {{ range .Values.vault.policies }}
      vault policy write {{ .name }} /vault/config/{{ .name }}_policy.hcl
      {{ end -}}
    }

    enable_ldap() {
      vault auth enable ldap

      vault write auth/ldap/config \
        url="ldaps://{{ .Values.ldap.server }}:636" \
        binddn="{{ .Values.ldap.binduser }},{{ .Values.ldap.userdn }},{{ .Values.ldap.basedn }}" \
        bindpass="{{ .Values.ldap.bindpass }}" \
        userdn="{{ .Values.ldap.userdn }},{{ .Values.ldap.basedn }}" \
        userattr="{{ .Values.ldap.userattr }}" \
        groupdn="{{ .Values.ldap.groupdn }},{{ .Values.ldap.basedn }}" \
        groupattr="{{ .Values.ldap.groupattr }}" \
        starttls={{ .Values.ldap.start_tls }} \
        insecure_tls={{ .Values.ldap.insecure_tls }}

      vault write auth/ldap/groups/admin policies=admin
    }

    enable_username_pass() {
      vault auth enable userpass

      vault write auth/userpass/users/admin password=$VAULT_ADMIN_PASSWORD policies=admin
    }

    enable_kubernetes() {
      vault auth enable kubernetes

      vault write auth/kubernetes/config \
        kubernetes_host=https://kubernetes.default.svc.cluster.local:443 \
        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        token_reviewer_jwt=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      {{ range .Values.vault.roles }}
      vault write auth/kubernetes/role/{{ .name }} \
        bound_service_account_names={{ .boundServiceAccounts }} \
        bound_service_account_namespaces={{ .boundServiceAccountNamespaces }} \
        policies={{ .policies }} \
        ttl={{ .tokenTtl }}
      {{ end -}}
    }